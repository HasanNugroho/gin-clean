basePath: /api
definitions:
  constants.Role:
    enum:
    - user
    - admin
    type: string
    x-enum-varnames:
    - ROLE_USER
    - ROLE_ADMIN
  dto.AuthResponse:
    properties:
      data: {}
      refresh_token:
        type: string
      token:
        type: string
    type: object
  dto.CreateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
      phone_number:
        type: string
      role:
        allOf:
        - $ref: '#/definitions/constants.Role'
        enum:
        - user
        - admin
        - owner
        - customer
    required:
    - email
    - name
    - password
    - phone_number
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  dto.RenewalTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  dto.UpdateUserRequest:
    properties:
      email:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      password:
        minLength: 6
        type: string
      phone_number:
        type: string
      role:
        allOf:
        - $ref: '#/definitions/constants.Role'
        enum:
        - user
        - admin
        - owner
        - customer
    type: object
  response.Meta:
    properties:
      code:
        type: integer
      limit:
        type: integer
      message:
        type: string
      page:
        type: integer
      total_pages:
        type: integer
      total_rows:
        type: integer
    type: object
  response.Response:
    properties:
      data: {}
      meta:
        $ref: '#/definitions/response.Meta'
    type: object
host: localhost:7000
info:
  contact: {}
  description: This is a sample server celler server.
  title: Example Rest API
  version: "1.0"
paths:
  /v1/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return access token
      parameters:
      - description: Login credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.AuthResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: User login
      tags:
      - auth
  /v1/auth/logout:
    post:
      consumes:
      - application/json
      description: Invalidate access & refresh token by blacklisting them
      parameters:
      - description: Refresh token payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.RenewalTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Logout session
      tags:
      - auth
  /v1/auth/refresh:
    post:
      consumes:
      - application/json
      description: Use refresh token to obtain new access token
      parameters:
      - description: Refresh token payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.RenewalTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.AuthResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Refresh access token
      tags:
      - auth
  /v1/users:
    post:
      consumes:
      - application/json
      description: Admin endpoint to create a new user
      parameters:
      - description: Create Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create a user (admin)
      tags:
      - Users
  /v1/users/{id}:
    delete:
      description: Delete user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - Users
    get:
      description: Retrieve a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  type: object
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update user data by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User data to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Update user by ID
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
